import { Params } from '@angular/router';
import { BaseRouterStoreState, SerializedRouterStateSnapshot } from '@ngrx/router-store';
/**
 * The custom NGRX router reducer
 */
export declare type CustomRouterReducerState<
  T extends BaseRouterStoreState = SerializedRouterStateSnapshot
> = {
  /**
   * The current router state
   */
  current: RouterStateUrl;
};
/**
 * The URL's state properties
 */
export interface RouterStateUrl {
  /**
   * The current URL
   */
  url: string;
  /**
   * The current shared parameters
   */
  params: Params;
  /**
   * The current URL's query parameters
   */
  queryParams: Params;
}
/**
 * The base screens' state
 */
export interface State {
  /**
   * The router NGRX reducer
   */
  routerReducer: CustomRouterReducerState;
}
/**
 * The base properties of the context identifier of the screens generated by `UI Studio`
 */
export interface ScreenContext {
  /**
   * The type of the screen such as: `search`, `edit`, `view`...etc
   */
  screenType: any;
  /**
   * The screen's unique identifier
   */
  screenId: string | number;
  /**
   * The business feature
   */
  feature: any;
  /**
   * The relation property name in case of a master/ details screen
   */
  roleName?: string;
  /**
   * The main data object's identifier
   */
  code?: string;
  /**
   * The selected row's identifier
   */
  rootId?: string;
  /**
   * The available NGRX screens identifiers
   */
  ids?: string;
}

/**
 * The NGRX screen's state properties of the screens generated by `UI Studio`
 */
export interface ScreenState<T> {
  /**
   * The state's unique iedntifier
   */
  id: string | number;
  /**
   * The loader boolean property, if `true` a mask will be displayed
   */
  loading?: boolean;
  /**
   * The data value
   */
  value?: any;
  /**
   * Lanches the validation process if `true`. It is mainly used in an `edit` screen
   * called in a Wizard component
   */
  getData?: boolean;
  /***
   * Screen is displayed as last step or not when linked to a wizard as step  
   */
  lastStep?: boolean,
  /***
   * The datetime to display the screen if opened inside a wizard  
   */
  displayScreen?: string,
  /**
   * The caller screen's context
   */
  parent?: ScreenContext;
  /**
   * @ignore
   */
  children?: { ids: any[]; selectedId?: string; value: any };
  /**
   * @ignore
   */
  path?: string;
  /**
   * Lanches the validation process if `true`. It is mainly used in an `edit` screen
   * called in a Wizard component
   */
  validate?: boolean;
  /**
   * Checks if a screen is valid. It is mainly used in an `edit` screen
   * called in a Wizard component
   */
  isValid?: boolean;
  /**
   * The current screen's index. It is mainly used in a Wizard component
   */
  currentIndex?: number;
  /**
   * This property is used to filter the state's value if updated from child components or not
   */
  updatedByChildren?: boolean;
  /**
   * This property is used to filter the state's value if confirm or next action
   */
  actionType?: string;
  /**
   * This property is used to filter the state's value if confirm or next action
   */
   updates?: string;
}
/**
 * The base state properties of a criteria state
 */
export interface CriteriaScreenState<T> extends ScreenState<T> {
  /**
   * The parsed criteria property
   */
  criteria: string;
}

/**
 *  The base state's properties of a collection screen
 */
export interface CollectionScreenState<T> extends ScreenState<T> {
  /**
   * The total number of the data items
   */
  totalItems?: number;
  /**
   * The current page's number
   */
  page?: number;
  /**
   * The size of items per page
   */
  size?: number;
  /**
   * The data items value
   */
  value?: any;
  /**
   * The technical keys configured mainly in the column
   */
  keys?: string;
  /**
   * The sorting order key
   */
  order?: string;
  /**
   * @ignore
   */
  rowsIdList?: string;
  /**
   * @ignore
   */
  rowId?: string;
  /**
   * The selected rows
   */
  rowsSelected?: T[];
}

/**
 * Screen  entity state
 * for a selector screen
 */
export interface SelectorScreenState<T> extends CollectionScreenState<T> {}

/**
 * Builds and returns a screen's context
 * @param feature
 * @param screenType
 * @param screenId
 * @param roleName
 * @returns built screen context
 *
 */
export function buildScreenCtx(
  feature: string,
  screenType: string,
  screenId: string,
  roleName?: string,
  rootId?: string,
  ids?: string
): ScreenContext {
  return {
    feature: feature,
    screenType: screenType,
    screenId: screenId,
    roleName: roleName,
    rootId: rootId,
    ids: ids,
  };
}
