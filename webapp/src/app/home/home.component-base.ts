import { Title } from '@angular/platform-browser'
import {
  OnInit,
  AfterViewInit,
  OnDestroy,
  Component,
  inject,
} from '@angular/core'
import { Router } from '@angular/router'
import { trigger, state, style } from '@angular/animations'
import { Subject } from 'rxjs'
import { takeUntil } from 'rxjs/operators'

import { MenuService } from '@services/menu/menu.service'
import { AuthManagerService } from '@services/auth/auth-manager.service'
import { MessagesService as Messages } from '@services/messages/message.service'
import { environment } from '@env/environment'
import { FeatureService } from '@app/core/services/feature/feature.service'
import { isEmpty } from 'lodash'
import { getDeviceInfo } from '@shared/utils/device-utils'

/**
 * This is the base Home Component that displays the main structure of your desktop & mobile application once the user is logged in like the `Main menu`, `header`, `main body` and `footer`.
 *
 * This component is auto generated by `UI Studio` and it is highly recommended to avoid modifying this class, otherwise you can override all the generated methods & variables in
 * the inherited class MainComponent.
 */
@Component({ template: '' })
export class MainBaseComponent implements OnInit, AfterViewInit, OnDestroy {
  /**
   * Injected services
   */
  menuService = inject(MenuService)
  authService = inject(AuthManagerService)
  messageService = inject(Messages)
  router = inject(Router)
  titleService = inject(Title)
  featureService = inject(FeatureService)
  /**
   * The base path of your REST API calls
   */
  BASE_PATH = environment.basePath
  /**
   * Option to collapse or expand the main menu's panel
   */
  expandedState = 'collapsed'
  /**
   * The menu items constant used to translate your menu
   */
  MENU_ITEMS = 'Menu Items.'
  /**
   * The Subjet emitter object to destroy all the subscriptions
   * when the component is destroyed
   */
  destroy$: Subject<boolean> = new Subject<boolean>()
  /**
   * The title of the current opened page
   */
  screenTitle = ''
  /**
   * Option to expand or collapse the main menu's panel
   */
  menuExpanded = false
  /**
   * The current styleName of the current page
   */
  styleClass
  // palmyra-needle-add-menu-entry: Do not delete this line
  menu = [
    {
      label: $localize`:menu;conge:Conge`,
      icon: 'fa fa-umbrella-beach',
      id: 'conge',
      link: ['/conge/listconge'],
      command: (event) => this.openPage(event.item),
    },
    {
      label: $localize`:menu;messages:Messages`,
      icon: 'fa fa-mail-bulk',
      id: 'messages',
      link: ['/message/messagelist'],
      command: (event) => this.openPage(event.item),
    },
    {
      label: $localize`:menu;departement:Departement`,
      id: 'departement',
      link: ['/departement/search-1'],
      command: (event) => this.openPage(event.item),
    },
    {
      label: $localize`:menu;liste-des-employer:Liste des employer`,
      id: 'liste-des-employer',
      link: ['/employee/search-1'],
      command: (event) => this.openPage(event.item),
    },
  ]

  // end palmyra-needle-add-menu-entry
  /**
   * Initializes the min component
   * @returns {void}
   */
  ngOnInit() {
    const securityData = this.authService.getSecurityData()
    this.menu = securityData
      ? this.menuService.filterByRole(this.menu, securityData?.menu)
      : this.menu
    this.getScreenTitle(this.menu)
    this.menuExpanded = this.menuService.getMenuInitialState()
  }

  /***
   * Adds styleName to html root element
   */
  ngAfterViewInit() {
    const classNames = ['home']
    const deviceInfo = getDeviceInfo()
    if (deviceInfo.isMobile) {
      classNames.push('mobile')
      classNames.push(deviceInfo.mobileOs)
    } else {
      classNames.push('desktop')
    }
    ;(document.querySelector('html') as HTMLElement).className =
      classNames.join(' ')
  }
  /**
   * Uses the keyboard enter button like mouse Click
   * @param event
   */
  keyboardEnter(event: any) {
    event.code === 'NumpadEnter' ? event.srcElement.click() : ''
  }
  /**
   * set focus to the first element
   *  @param element
   *  @returns {void}
   */
  focus(element): void {
    element.querySelectorAll('[tabindex]')[0].focus()
  }
  /**
   * Logout the logged user
   */
  logout() {
    this.authService.logout()
  }
  /**
   * Open the page in a workspace and close the main menu's sidebar
   */
  openPage(menu: any) {
    this.open(menu)
    this.screenTitle = menu.label
    this.styleClass = menu.styleClass
  }
  /**
   * Set the screen title based on menu items
   * @param menu
   */
  getScreenTitle(menu: any) {
    menu.map((item) => {
      if (item.items) {
        this.getScreenTitle(item.items)
      } else if (
        item &&
        !isEmpty(item.link) &&
        this.router.url.startsWith(item.link)
      ) {
        this.screenTitle = item.label
      }
    })
  }

  /**
   * Open a page
   * @param menu
   */
  open(menu: any) {
    const link = menu.link ? menu.link[0] : undefined
    const externalLink = link ? link.startsWith('http') : link
    const sameNavigation =
      menu.label === this.screenTitle ||
      link === '/' ||
      this.router.url.startsWith(encodeURI(link))
    const queryParams = {
      ...menu.params,
    }
    externalLink
      ? window.open(link, menu.openWindow ? '_blank' : '_self')
      : this.router.navigate(menu.link, { queryParams }).then((_) => {
          if (sameNavigation) {
            this.featureService.sameNavigation()
          }
        })
  }
  /**
   * Toggles menu state
   */
  toggleMenu() {
    this.menuExpanded = !this.menuExpanded
    this.menuService.setMenuState(this.menuExpanded)
  }
  /**
   * Destroys the component and all the subscriptions
   */
  ngOnDestroy() {
    this.destroy$.next(true)
    this.destroy$.complete()
  }
}
/**
 * The menu entry interface
 */
export interface Menu {
  /**
   * The menu entry's title
   */
  label: string
  /**
   * The menu entry's roles
   */
  roles?: string[]
  /**
   * The menu entry's styleName
   */
  styleName?: string
  /**
   * The menu entry's icon using primeicons or FontAwesome
   */
  icon?: string
  /**
   * The menu entry's children items
   */
  items?: Menu[]
  /**
   * The menu entry's link to open
   */
  link?: string[]
  /**
   * The menu entry's technical function to call onClick event
   */
  command?: any
}
