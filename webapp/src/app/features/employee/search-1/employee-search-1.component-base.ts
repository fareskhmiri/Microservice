import { Component, OnInit, inject } from '@angular/core'
import { Observable, from, of, zip } from 'rxjs'
import { map, reduce, tap, switchMap, filter, takeUntil } from 'rxjs/operators'
import { ActivatedRoute, Router } from '@angular/router'
import { MenuItem, ConfirmationService, LazyLoadEvent } from 'primeng/api'
import { Store } from '@ngrx/store'
import { get, isEmpty } from 'lodash'

import { getValue, getParamValue } from '@app/shared/utils/feature-utils'
import * as fn from '@app/shared/utils/expression-functions'
import { CollectionScreenComponent } from '@core/features/collection-screen.component'
import * as fromStore from '@app/core/store'
import {
  Column,
  ColumnGroup,
  ResponsiveResolution,
} from '@core/utils/collection.util'
import { FeatureService } from '@services/feature/feature.service'
import { CriteriaService } from '@app/core/services/criteria/criteria.service'
import * as fromEmployee from '@features/employee/search-1/store'

import { environment } from '@env/environment'
/**
 * The base REST API path
 */
const BASE_PATH = environment.basePath
/**
 * The feature module's name
 */
const FEATURE = 'Employee'
/**
 * The component's name
 */
const SCREEN = 'Search1'
/**
 * This base component displays a collection of items.
 * This component is auto generated by `UI Studio` tool for a screen of type `EditCollection`, please refer to our official documentation for more informations:
 * https://wiki.vermeg.com/pages/viewpage.action?spaceKey=PFD&title=Components+Store#ComponentsStore-Searchscreen
 *
 * You can override, if needed, all the generated methods & variables of the Base component in this class.
 *
 * @AutoSkip Do not remove this tag to keep your file out of regeneration.
 * @Note This component is generated once and will no more be erased by the generator.
 **/
@Component({ template: '' })
export class EmployeeSearch1BaseComponent
  extends CollectionScreenComponent
  implements OnInit
{
  /**
   * Injected Services
   **/

  criteriaService = inject(CriteriaService)
  confirmationService = inject(ConfirmationService)
  featureService = inject(FeatureService)
  /**
   * The stored variables in NGRX State like `page`, `pageSize`, `keys`...etc
   */
  vars: any = {}
  /**
   * The selector of the `loading` state property, it displays a mask when receiving a `true` boolean value
   */
  loading$: Observable<boolean>
  /**
   * The Observable selector of the value property stored in NGRX State
   */
  value$: Observable<any[]>
  /**
   * The collection of data items loaded
   */
  value: any[]
  /**
   * The selected rows selector
   */
  rowsSelected$: Observable<any[]>
  /**
   * Switch Mode to be set in local storage
   */
  prefix
  /**
   * The technical keys of the configured columns
   */
  keys = `firstName,lastName,email,profession,salary,departement`
  /**
   * The Observable selector of the current page property stored in NGRX State
   */
  currentPage$
  /**
   * The Observable selector of the page size property stored in NGRX State
   */
  pageSize$
  /**
   * The Observable selector of the total items number property stored in NGRX State
   */
  count$
  /**
   * The string criteria of the input filters
   */
  criteria

  /**
   * The current page's index
   */
  currentPage = 0
  /**
   * disable tooltip on cell hover when content is not truncated
   */
  disableTooltip = true

  /**
   *  The size of items per page
   **/
  pageSize = 10
  /**
   *  The collection of items
   **/
  items: any[]
  /**
   *  The collection of the selected items
   **/
  selectedItems: any[] = []

  rowOperations$: Observable<MenuItem[]>

  columnHeaderi18n: any = {
    firstName: $localize`:@@UID__fld_firstName;employee;search-1:Nom`,

    lastName: $localize`:@@UID__fld_lastName;employee;search-1:Pr√©nom`,

    email: $localize`:@@UID__fld_email;employee;search-1:Email`,

    profession: $localize`:@@UID__fld_profession;employee;search-1:Profession`,

    salary: $localize`:@@UID__fld_salary;employee;search-1:Salaire`,

    departement: $localize`:@@UID__fld_departement;employee;search-1:departement`,
  }

  /** @inheritDoc */
  constructor(
    router: Router,
    store: Store<fromEmployee.State>,
    route: ActivatedRoute
  ) {
    super(route, store, router)
  }
  /**
   * Initializes the state and value of the component by dispatching NGRX Actions
   * Selects and listens to the changes of some properties stored in the state
   */
  ngOnInit() {
    super.ngOnInit()
    this.ctx = fromStore.initScreen(
      FEATURE,
      SCREEN,
      this.screenId,
      this.activeRoute
    )
    this.criteria = this.getCriteria()
    this.params = { ...this.params, ...this.initParams() }

    this.store.dispatch(fromEmployee.initAction({ ...this.params }))
    this.init()

    this.value$ = this.store.select(fromStore.selectValue, this.ctx).pipe(
      fromStore.distinctUntilBeChanged,
      tap((items) => {
        this.value = items
      })
    )

    this.loading$ = this.store.select(fromStore.selectLoading, this.ctx)
    this.prefix = `${environment.prefix}_employee_search-1`
    this.count$ = this.store.select(fromStore.selectCount, this.ctx)
    this.store
      .select(fromStore.selectSearchVars, this.ctx)
      .pipe(takeUntil(this.destroy$))
      .subscribe((data) => {
        this.vars = { ...data }
      })
    this.rowsSelected$ = this.store.select(
      fromStore.selectRowsSelected,
      this.ctx
    )
  }
  /**
   * Dispatch the search Action
   */
  init() {
    this.store.dispatch(fromEmployee.searchAction({ ...this.params }))
    this.currentPage$ = this.store.select(fromStore.selectPage, this.ctx)
    this.pageSize$ = this.store.select(fromStore.selectPageSize, this.ctx)
  }
  /**
   * This method returns the feature & screen name
   * @return {object}
   */
  getDescriptor() {
    return { feature: FEATURE, screen: SCREEN }
  }
  /**
   * Returns a decoded criteria parameter
   */
  getCriteria() {
    let criteria = this.activeRoute.snapshot.queryParams.criteria
    return criteria
  }
  /**
   * Returns the basic payload value
   */
  initParams(): any {
    return {
      totalItems: this.totalItems,
      page: 1,
      size: this.pageSize,
      keys: this.keys,
      order: this.orderBy,
      criteria: this.criteria,
      vars: {
        page: 1,
        size: this.pageSize,
        keys: this.keys,
        criteria: this.criteria,
        order: this.orderBy,
      },
    }
  }

  /**
   * Get date format from the profile
   * @param {string} temporalType
   * @param {string} datePrecision
   * @return {string} the date format
   */
  getDateFormat(temporalType: string, datePrecision?: string): string {
    return this.featureService.profileService.getDateFormat(
      temporalType,
      datePrecision
    )
  }

  /**
   * Paginates the retrieved data
   * @param {PageChange} event - The PageChange event
   */
  paginate(event) {
    this.store.dispatch(
      fromEmployee.searchAction({
        ...this.params,
        loading: true,
        size: event.rows,
        page: event.page + 1,
        vars: { ...this.vars, size: event.rows, page: event.page + 1 },
      })
    )
  }

  /**
   * display tooltip with cell content when content is truncated
   */
  addTooltip(show) {
    this.disableTooltip = show
  }

  /**
   * Returns the payload value to be dispatched in the NGRX actions
   * @returns {object}
   */
  getActionPayload() {
    return {
      ...super.getActionPayload(),
      vars: { ...this.vars, items: this.value },
      data:
        this.selectedItems instanceof Array
          ? this.selectedItems[0]
          : this.selectedItems,
      rowId: this.selectedItems ? this.selectedItems['code'] : undefined,
      value: this.value,
    }
  }
  /**
   * Dispatches an NGRX Action to select rows
   */
  onSelectionChange() {
    this.store.dispatch(
      fromEmployee.rowsSelectionChangeAction({
        ...this.params,
        rowsSelected: [this.selectedItems],
      })
    )
  }
  /**
   * Executes the Button-04826 action
   * @return {void}
   */
  doButton04826(): void {
    this.store.dispatch(
      fromEmployee.button04826Action({ ...this.getActionPayload() })
    )
  }
}
