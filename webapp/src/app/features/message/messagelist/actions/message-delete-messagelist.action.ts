// delete

import { from, Observable, Observer, of } from 'rxjs'
import { map } from 'rxjs/operators'
import { get } from 'lodash'
import * as fromStore from '@app/core/store'
import { Injectable } from '@angular/core'

import { Action } from '@core/components/actions/action.default'
import { getValue, getParamValue } from '@app/shared/utils/feature-utils'
import { HttpClient } from '@angular/common/http'
import { FeatureService } from '@services/feature/feature.service'
import { MessagesService as Messages } from '@services/messages/message.service'
import { ConditionEvaluatorService } from '@services/condition-evaluator/condition-evaluator.service'
import { environment } from '@env/environment'
const BASE_PATH = environment.basePath
/**
 * @deprecated
 * In the upcoming release, this file will be deleted. If you have any custom code in this file, please move it to the effects file.
 * Service that calls a REST API service to remove an item
 * This service is auto generated by `UI Studio` tool for a `button` component having the `delete-item` template.
 *
 * It is not recommended to modify this component, but if you will need to customize it, you will have to skip its generation via the `cli-config.json` file and `you will have to maintain it`:
 * https://wiki.vermeg.com/display/PFD/Workspace+Properties#WorkspaceProperties-F3
 */
@Injectable()
export class DeleteAction extends Action {
  constructor(
    private featureService: FeatureService,
    private httpClient: HttpClient,

    private message: Messages,
    private conditionEvaluator: ConditionEvaluatorService
  ) {
    super()
  }

  /**
   * This is the main method that interacts with the REST API
   * @param data
   * @returns {Observable}
   */
  execute(context): Observable<any> {
    const params = {}
    const _id: any = getValue(context.data, `_id`, '')
    return this.httpClient.delete<any>(`${BASE_PATH}/messages/${_id}`, { params })
  }
  /**
   * This method runs after the execute method to display messages
   * @param data
   * @returns {Observable}
   */
  postExecute(context): Observable<any> {
    this.message.show(
      $localize`:message;deletedWithSuccess:Item deleted successfully`,
      `success`
    )
    this.message.showHttpMessages(context)
    return of(context)
  }
}
