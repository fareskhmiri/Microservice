import { OnInit, AfterViewInit, Component, inject } from '@angular/core'
import { Router } from '@angular/router'
import {
  UntypedFormGroup,
  UntypedFormBuilder,
  Validators,
} from '@angular/forms'
import { Observable } from 'rxjs'
import { Store } from '@ngrx/store'

import { LoaderService } from '@core/components/loaders/services/loader.service'
import { selectPageLoading } from '@app/core/store'
import { AuthManagerService } from '@services/auth/auth-manager.service'
import { logOut } from '@auth/store/actions/auth.actions'
import { State, errorMessageSelector } from '@auth/store/reducers/auth.reducers'
/**
 * Component that handles the user authentication and logout
 *
 * This component is auto generated by `UI Studio` and it is highly recommended to avoid modifying this class, otherwise you can override all the generated methods & variables in
 * the inherited class LoginComponent.
 */
@Component({ template: '' })
export class LoginBaseComponent implements OnInit, AfterViewInit {
  /**
   * Injected services
   */
  formBuilder = inject(UntypedFormBuilder)
  authService = inject(AuthManagerService)
  router = inject(Router)
  loaderService = inject(LoaderService)
  store = inject(Store<State>)
  /**
   * The Form Builder
   */
  form: UntypedFormGroup
  /**
   * The selector of the `loading` state property, it displays a mask when receiving a `true` boolean value
   */
  loading$: Observable<boolean>
  /**
   * The error messages observable
   */
  loginErrorMsg$: Observable<string>
  /**
   * The reset password option
   */
  resetPassword: boolean
  /**
   * Initializes the form and selects/ listens to the changes of some properties stored in the state
   */
  ngOnInit() {
    this.form = this.formBuilder.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
    })
    if (this.authService.isLogged()) {
      this.router.navigate(['/'])
    }
    this.loginErrorMsg$ = this.store.select(errorMessageSelector)
    this.loading$ = this.store.select(selectPageLoading, {
      feature: 'Auth',
    })
  }
  /***
   * Adds a styleName to the ROOT HTML element
   */
  ngAfterViewInit() {
    ;(document.querySelector('html') as HTMLElement).className = 'login'
  }
  /**
   *  Submits the form data
   */
  onSubmit(): void {
    const user = {
      username: this.form.controls.username.value,
      password: this.form.controls.password.value,
    }
    this.loaderService.show()
    this.authService.authenticateUser(user)
    this.loaderService.hide()
    this.resetPassword = this.authService.resetPassword
  }
  /**
   * Reset the password
   * @param event
   */
  onResetSuccess(event) {
    if (event) {
      this.resetPassword = false
      this.store.dispatch(logOut({}))
    }
  }
  /**
   * Sets the property `resetPassword` to `true`
   */
  changePassword(): void {
    this.resetPassword = true
  }
}
